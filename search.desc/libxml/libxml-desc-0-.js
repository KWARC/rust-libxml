searchState.loadedDescShard("libxml", 0, "A wrapper for libxml2\nBindings to the C interface\nXML Global Error Structures and Handling\nXML and HTML parsing The parser functionality\nRead-only parallel primitives\nSchema Validation\nManipulations on the DOM representation The tree …\n<code>XPath</code> module for global lookup in the DOM The <code>XPath</code> …\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nxmlDOMWrapCtxt:\nxmlParserCtxt:\nxmlSAXLocator:\nxmlXPathContext:\nxmlXPathParserContext:\nattributeDeclSAXFunc: @ctx:  the user data (XML parser …\nattributeSAXFunc: @ctx:  the user data (XML parser context)\ncdataBlockSAXFunc: @ctx:  the user data (XML parser …\ncharactersSAXFunc: @ctx:  the user data (XML parser …\ncommentSAXFunc: @ctx:  the user data (XML parser context) …\nelementDeclSAXFunc: @ctx:  the user data (XML parser …\nendDocumentSAXFunc: @ctx:  the user data (XML parser …\nendElementNsSAX2Func: @ctx:  the user data (XML parser …\nendElementSAXFunc: @ctx:  the user data (XML parser …\nentityDeclSAXFunc: @ctx:  the user data (XML parser …\nerrorSAXFunc: @ctx:  an XML parser context @msg:  the …\nexternalSubsetSAXFunc: @ctx:  the user data (XML parser …\nfatalErrorSAXFunc: @ctx:  an XML parser context @msg:  the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngetEntitySAXFunc: @ctx:  the user data (XML parser context)\ngetParameterEntitySAXFunc: @ctx:  the user data (XML …\nhasExternalSubsetSAXFunc: @ctx:  the user data (XML parser …\nhasInternalSubsetSAXFunc: @ctx:  the user data (XML parser …\nInterfaces for the Push mode.\nxmlParserCtxt:\nxmlParserOption:\nignorableWhitespaceSAXFunc: @ctx:  the user data (XML …\ninternalSubsetSAXFunc: @ctx:  the user data (XML parser …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nisStandaloneSAXFunc: @ctx:  the user data (XML parser …\nnotationDeclSAXFunc: @ctx:  the user data (XML parser …\nprocessingInstructionSAXFunc: @ctx:  the user data (XML …\nreferenceSAXFunc: @ctx:  the user data (XML parser context)\nresolveEntitySAXFunc: @ctx:  the user data (XML parser …\nsetDocumentLocatorSAXFunc: @ctx:  the user data (XML …\nstartDocumentSAXFunc: @ctx:  the user data (XML parser …\nstartElementNsSAX2Func: @ctx:  the user data (XML parser …\nstartElementSAXFunc: @ctx:  the user data (XML parser …\nunparsedEntityDeclSAXFunc: @ctx:  the user data (XML …\nwarningSAXFunc: @ctx:  an XML parser context @msg:  the …\nxlinkExtendedLinkFunk: @ctx:  user data pointer @node:  …\nxlinkExtendedLinkSetFunk: @ctx:  user data pointer @node:  …\nVarious defines for the various Link properties.\nThis is the structure containing a set of Links detection …\nxlinkNodeDetectFunc: @ctx:  user data pointer @node:  the …\nxlinkSimpleLinkFunk: @ctx:  user data pointer @node:  the …\nxmlAttr:\nxmlAttribute:\nxmlAttributeDefault:\nxmlAttributeType:\nxmlAutomataPtr:\nxmlAutomataStatePtr:\nxmlBuf:\nxmlBufPtr:\nxmlBuffer:\nxmlBufferAllocationScheme:\nxmlChar:\nxmlCharEncodingInputFunc: @out:  a pointer to an array of …\nxmlCharEncodingOutputFunc: @out:  a pointer to an array of …\nxmlDOMWrapAcquireNsFunction: @ctxt:  a DOM wrapper context …\nxmlDOMWrapCtxt:\nxmlDeregisterNodeFunc: @node: the current node\nxmlDoc:\nxmlDocProperty\nxmlDtd:\nxmlElement:\nxmlElementContent:\nxmlElementContentOccur:\nxmlElementContentType:\nxmlElementTypeVal:\nxmlEnumeration:\nxmlError:\nxmlErrorDomain:\nxmlErrorLevel:\nxmlExternalEntityLoader: @URL: The System ID of the …\nxmlFeature:\nDefault ‘file://’ protocol callbacks\nxmlFreeFunc: @mem: an already allocated block of memory\nxmlGenericErrorFunc: @ctx:  a parsing context @msg:  the …\nxmlHashCopier: @payload:  the data in the hash @name:  the …\nxmlHashDeallocator: @payload:  the data in the hash @name: …\nxmlHashScanner: @payload:  the data in the hash @data:  …\nxmlHashScannerFull: @payload:  the data in the hash @data: …\nxmlID:\nxmlInputCloseCallback: @context:  an Input context\nxmlInputMatchCallback: @filename: the filename or URI\nxmlInputOpenCallback: @filename: the filename or URI\nxmlInputReadCallback: @context:  an Input context @buffer: …\nxmlListDataCompare: @data0: the first data @data1: the …\nxmlListDeallocator: @lk:  the data to deallocate\nxmlListWalker: @data: the data found in the list @user: …\nxmlMallocFunc: @size:  the size requested in bytes\nxmlNode:\nxmlNotation:\nxmlNs:\nxmlOutputBufferCreateFilenameFunc: @URI: the URI to write …\nxmlOutputCloseCallback: @context:  an Output context\nxmlOutputMatchCallback: @filename: the filename or URI\nxmlOutputOpenCallback: @filename: the filename or URI\nxmlOutputWriteCallback: @context:  an Output context …\nxmlParserCtxt:\nxmlParserError:\nxmlParserInputBufferCreateFilenameFunc: @URI: the URI to …\nxmlParserInputDeallocate: @str:  the string to deallocate\nxmlParserInputState:\nxmlParserMode:\nxmlParserNodeInfo:\nxmlParserOption:\nxmlReallocFunc: @mem: an already allocated block of memory …\nxmlRef:\nxmlRegExecCallbacks: @exec: the regular expression context …\nxmlRegExecCtxtPtr:\nxmlRegexpPtr:\nxmlRegisterNodeFunc: @node: the current node\nxmlSAXLocator:\nxmlSaveOption:\nThe schemas related types are kept internal\nA schemas validation context\nThis error codes are obsolete; not used any more.\nxmlSchemaValidOption:\nxmlSchemaValidityErrorFunc: @ctx: the validation context …\nxmlSchemaValidityLocatorFunc: @ctx: user provided context …\nxmlSchemaValidityWarningFunc: @ctx: the validation context …\nxmlStrdupFunc: @str: a zero terminated string\nxmlStructuredErrorFunc: @userData:  user provided data for …\nxmlValidityErrorFunc: @ctx:  usually an xmlValidCtxtPtr to …\nxmlValidityWarningFunc: @ctx:  usually an xmlValidCtxtPtr …\nxmlXPathAxisFunc: @ctxt:  the XPath interpreter context …\nConversion functions to basic types.\nSeparate compilation/evaluation entry points.\nxmlXPathContext:\nxmlXPathConvertFunc: @obj:  an XPath object @type:  the …\nThe set of XPath error codes.\nxmlXPathEvalFunc: @ctxt: an XPath parser context @nargs: …\nxmlXPathFuncLookupFunc: @ctxt:  an XPath context @name:  …\nxmlXPathFunction: @ctxt:  the XPath interprestation context\nObjects and Nodesets handling\nContext handling.\nUtilities to extend XPath.\nNodeSet handling.\nReally internal functions\nEvaluation functions.\nxmlXPathParserContext:\nExtending a context.\nxmlXPathVariableLookupFunc: @ctxt:  an XPath context …\nA recoverable error\nA fatal error\nNo error\nWrapper around xmlErrorPtr. Some fields have been omitted …\nA simple warning\nRust enum variant of libxml2’s xmlErrorLevel\nThe variety of error. See libxml’s xmlParserErrors enum.\nThe column where the error is present, or None if not …\nThe module that the error came from. See libxml’s …\nThe filename, lossily converted into UTF-8 from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an xmlErrorLevel provided by libxml2 (as an …\nCopies the error information stored at <code>error_ptr</code> into a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error’s level\nThe linenumber, or None if not applicable.\nHuman-readable informative error message.\nHuman-friendly error message, lossily converted into UTF-8 …\nDocument too large for libxml2.\nCould not open file error.\nParsing returned a null pointer as document pointer\nRelaxed parsing for HTML\nEnum for the parse formats supported by libxml2\nParsing API wrapper for libxml2\nParser Options\nStrict parsing for XML\nParser Errors\ncompact small text nodes\nCreate a parser for XML documents\nCreate a parser for HTML documents\nmanually-specified encoding\nThe <code>ParseFormat</code> for this parser\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nrelax any hardcoded limit from the parser\nignore internal document encoding hint\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks a string for well-formedness.\nChecks a string for well-formedness with …\nremove blank nodes\ndo not default a doctype if not found\ndo not default a doctype if not found\nDo not add implied html/body… elements\nForbid network access\nsuppress warning reports\nParses the XML/HTML file <code>filename</code> to generate a new …\nParses the XML/HTML file <code>filename</code> with a …\nParses the XML/HTML bytes <code>input</code> to generate a new <code>Document</code>\nParses the XML/HTML bytes <code>input</code> with a manually-specified …\npedantic error reporting\nRelaxed parsing\nLightweight struct for read-only parallel processing\nTwo nodes are considered equal, if they point to the same …\nfind read-only nodes via xpath, at the specified node and …\nReturns the argument unchanged.\nAlias for get_property\nAlias for get_property_no_ns\nAlias for get_property_node\nAlias for get_property_node_no_ns\nAlias for get_property_node_ns\nAlias for get_property_ns\nAlias for <code>get_properties</code>\nAlias for <code>get_properties_ns</code>\nReturns all child elements of the given node as a vector\nReturns all child nodes of the given node as a vector\nGet a set of class names from this node’s attributes\nReturns the content of the node (assumes UTF-8 XML …\nReturns the first child if it exists\nReturns the first element child if it exists\nReturns the last child if it exists\nReturns the last element child if it exists\nReturns the name of the node (empty string if name pointer …\nGets the active namespace associated of this node\nGet a list of namespaces declared with this node\nGets a list of namespaces associated with this node\nReturns the next element sibling if it exists\nReturns the next sibling if it exists\nReturns the parent if it exists\nReturns the previous element sibling if it exists\nReturns the previous sibling if it exists\nGet a copy of the attributes of this node\nGet a copy of this node’s attributes and their namespaces\nReturns the value of property <code>name</code>\nReturns the value of property <code>name</code> with no namespace\nReturn an attribute as a <code>Node</code> struct of type AttributeNode\nReturn an attribute with no namespace as a <code>Node</code> of type …\nReturn an attribute in a namespace <code>ns</code> as a <code>Node</code> of type …\nReturns the value of property <code>name</code> in namespace <code>ns</code>\nGet the node type\nAlias for has_property\nAlias for has_property_no_ns\nAlias for has_property_ns\nCheck if a property has been defined, without allocating …\nCheck if property <code>name</code> with no namespace exists\nCheck if property <code>name</code> in namespace <code>ns</code> exists\nCalls <code>U::from(self)</code>.\nChecks if the given node is an Element\nChecks if the underlying libxml2 pointer is <code>NULL</code>\nReturns true if it is a text node\nRead-only nodes are always linked\nLooks up the prefix of a namespace from its URI, basedo …\nLooks up the uri of a namespace from its prefix, basedo …\nImmutably borrows the underlying libxml2 <code>xmlNodePtr</code> pointer\nCreate a mock node, used for a placeholder argument\n<code>libc::c_void</code> isn’t hashable and cannot be made hashable\nWrapper on xmlSchemaParserCtxt\nWrapper on xmlSchemaValidCtxt\nReturn a raw pointer to the underlying xmlSchemaParserCtxt …\nReturn a raw pointer to the underlying xmlSchemaValidCtxt …\nDrains error log from errors that might have accumulated …\nDrains error log from errors that might have accumulated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a schema parsing context from a buffer in memory\nCreate a schema parsing context from a Document object\nCreate a schema parsing context from an URL\nCreate a schema validation context from a parser object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidates a given Document, that is to be tested to comply …\nValidates a given file from path for its compliance with …\nValidates a branch or leaf of a document given as a Node …\nDocument feature set\nNamespace feature set\nNode, and related, feature set\nTypes of libxml2 Nodes\nA libxml2 Document\nSave Options for Document\nforce HTML serialization on XML doc\nCast the document as a libxml Node\nforce XML serialization on HTML doc\nCreates a node for an XML processing instruction\nObtain the underlying libxml2 <code>xmlDocPtr</code> for this Document\nDuplicates the libxml2 Document into a new instance\nDuplicates a source libxml2 Document into the empty …\nformat save output\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the root element of the document\nGet the root element of the document (read-only)\nImport a <code>Node</code> from another <code>Document</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty libxml2 document\nCreates a new <code>Document</code> from an existing libxml2 pointer\ndrop the xml declaration\nno empty tags\ndisable XHTML1 specific rules\nSerializes a <code>Node</code> owned by this <code>Document</code>\nformat with non-significant whitespace\nSerializes a <code>RoNode</code> owned by this <code>Document</code>\nWrite document to <code>filename</code>\nSets the root element of the document\nSerializes the <code>Document</code> with options\nforce XHTML1 specific rules\nAn xml namespace\nExplicit free method, until (if?) we implement …\nReturns the argument unchanged.\nThe namespace href\nThe namespace prefix\nCalls <code>U::from(self)</code>.\nCreates a new namespace\nImmutably borrows the underlying libxml2 <code>xmlNsPtr</code> pointer\nMutably borrows the underlying libxml2 <code>xmlNsPtr</code> pointer\nGuard treshold for enforcing runtime mutability checks for …\nAn xml node\nCreates a new <code>Node</code> as child to the self <code>Node</code>\nAdd a next sibling\nAdd a previous sibling\nAdds a new text child, to this <code>Node</code>\nAppend text to this <code>Node</code>\nTwo nodes are considered equal, if they point to the same …\nfind nodes via xpath, at a specified node or the document …\nfind String values via xpath, at a specified node or the …\nReturns the argument unchanged.\nAlias for get_property\nAlias for get_property_no_ns\nAlias for get_property_node\nAlias for get_property_node_no_ns\nAlias for get_property_node_ns\nAlias for get_property_ns\nAlias for <code>get_properties</code>\nAlias for <code>get_properties_ns</code>\nReturns all child elements of the given node as a vector\nReturns all child nodes of the given node as a vector\nGet a set of class names from this node’s attributes\nReturns the content of the node (assumes UTF-8 XML …\nReturns the first child if it exists\nReturns the first element child if it exists\nReturns the last child if it exists\nReturns the last element child if it exists\nReturns the name of the node (empty string if name pointer …\nGets the active namespace associated of this node\nGet a list of namespaces declared with this node\nGets a list of namespaces associated with this node\nReturns the next element sibling if it exists\nReturns the next sibling if it exists\nReturns the parent if it exists\nReturns the previous element sibling if it exists\nReturns the previous sibling if it exists\nGet a copy of the attributes of this node\nGet a copy of this node’s attributes and their namespaces\nReturns the value of property <code>name</code>\nReturns the value of property <code>name</code> with no namespace\nReturn an attribute as a <code>Node</code> struct of type AttributeNode\nReturn an attribute with no namespace as a <code>Node</code> of type …\nReturn an attribute in a namespace <code>ns</code> as a <code>Node</code> of type …\nReturns the value of property <code>name</code> in namespace <code>ns</code>\nGet the node type\nAlias for has_property\nAlias for has_property_no_ns\nAlias for has_property_ns\nCheck if a property has been defined, without allocating …\nCheck if property <code>name</code> with no namespace exists\nCheck if property <code>name</code> in namespace <code>ns</code> exists\nGenerates a hash value from the <code>node_ptr</code> value.\nCalls <code>U::from(self)</code>.\nChecks if the given node is an Element\nChecks if the underlying libxml2 pointer is <code>NULL</code>\nReturns true if it is a text node\nChecks if node is marked as unlinked\nLooks up the prefix of a namespace from its URI, basedo …\nLooks up the uri of a namespace from its prefix, basedo …\nCreate a mock node, used for a placeholder argument\nCreate a new node, bound to a given document.\nCreates a new <code>Node</code> as child to the self <code>Node</code>\nCreate a new text node, bound to a given document\nImmutably borrows the underlying libxml2 <code>xmlNodePtr</code> pointer\nMutably borrows the underlying libxml2 <code>xmlNodePtr</code> pointer …\nCreate a mock node, used for a placeholder argument\nRemoves the namespaces of this <code>Node</code> and it’s children!\nAlias for remove_property\nAlias for remove_property_no_ns\nAlias for remove_property_ns\nRemoves the property of given <code>name</code>\nRemoves the property of given <code>name</code> with no namespace\nRemoves the property of given <code>name</code> and namespace (<code>ns</code>)\nreplace a <code>self</code>’s <code>old</code> child node with a <code>new</code> node in the …\nAlias for set_property\nAlias for set_property_ns\nSets the text content of this <code>Node</code>\nSets the name of this <code>Node</code>\nSets a <code>Namespace</code> for the node\nSet the guard value for the max Rc “strong count” …\nSets the value of property <code>name</code> to <code>value</code>\nSets a namespaced attribute\n<code>libc::c_void</code> isn’t hashable and cannot be made hashable\nAlias for <code>unlink_node</code>\nAlias for <code>unlink_node</code>\nAlias for <code>unlink_node</code>\nUnbinds the Node from its siblings and Parent, but not …\nTypes of xml nodes\nReturns the argument unchanged.\nconverts an integer from libxml’s <code>enum NodeType</code> to an …\nCalls <code>U::from(self)</code>.\nAn XPath context\nEssentially, the result of the evaluation of some xpath …\nReturns the raw libxml2 context pointer behind the struct\nfree the memory allocated\nevaluate an xpath\nfind nodes via xpath, at a specified node or the document …\nfind a literal value via xpath, at a specified node or the …\nfind literal values via xpath, at a specified node or the …\nuse if the XPath used was meant to return a string, such …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new Context for the Document of a given Node.\nreturns the result set as a vector of Strings\nreturns the result set as a vector of <code>Node</code> objects\nget the number of nodes in the result set\nreturns the result set as a vector of <code>RoNode</code> objects\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the binding to …\ncreate the xpath context for a document\nevaluate an xpath on a context Node\nevaluate an xpath on a context RoNode\nlibxml’s <code>ObjectPtr</code>\nRegister a namespace prefix-href pair on the xpath context\nlocalize xpath context to a specific Node")